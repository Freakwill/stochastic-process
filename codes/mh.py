#!/usr/bin/env python

"""
Metropolis Hastings
"""

from math import exp
import numpy as np  
from scipy.stats import norm  
 

def mh(target_pdf, proposal_pdf, init_state=0, max_iter=1000, n_samples=1000, burn_in=100):
    """Metropolis Hastings Algorithm
    
    Args:
        target_pdf (function): target pdf
        proposal_pdf (scipy object): proposal distribution
        init_state: initialization state
        max_iter (int, optional): number of iterations
        burn_in (int, optional): size of burn-in sample
    
    Returns:
        array: the sample generated by the algorithm
    """

    # Initialization
    current_state = init_state

    eps = 1e-10

    def _step(current_state):
        candidate_state = proposal_pdf(current_state).rvs()
        # compute accept proba.
        accept_prob = min(1, (target_pdf(candidate_state)+eps) / (target_pdf(current_state)+eps))
        if np.random.rand() < accept_prob:
            current_state = candidate_state
        return current_state

    # Metropolis-Hastings Algo.
    if burn_in > max_iter:
        raise Exception('The chain is ended in the burn_in period')
    for k in range(burn_in):
        current_state = _step(current_state)
    samples = []
    for k in range(burn_in, min(n_samples, max_iter)):
        current_state = _step(current_state)
        samples.append(current_state)
    return np.asarray(samples)


if __name__ == '__main__':

    def demo1():
        proposal_pdf = lambda x: norm(x, 0.3)
        target_pdf = norm(0, 1).pdf
        samples = mh(target_pdf, proposal_pdf, n_samples=10000, burn_in=2000, max_iter=100000)

        import matplotlib.pyplot as plt
        plt.hist(samples, bins=15, density=True, alpha=0.6, color='g')
        x_values = np.linspace(-3, 3, 200)
        plt.plot(x_values, target_pdf(x_values), 'r', alpha=0.5, label='Target Distribution')

        plt.xlabel('x')
        plt.ylabel('Probability Density')
        plt.title('Demo of Metropolis-Hastings Algo')
        plt.legend()
        # plt.savefig('../lectures/mh.png')
        plt.show()


    def demo2():
        from scipy.stats import multivariate_normal
        import matplotlib.pyplot as plt

        # Define a 2D target PDF
        # mean = [0, 0]
        # cov = [[4, -1], [-1, 2]]  # Different standard deviations for x and y
        # target_pdf_2d = multivariate_normal(mean, cov).pdf

        from sklearn.mixture import GaussianMixture
 
        # paramenters of mixture Gaussian
        means = [[0, 0], [3, 3]]
        covariances = [[[1, 0], [0, 1]], [[1, 0.5], [0.5, 1]]]
        weights = [0.6, 0.4]
         
        # use GaussianMixture of sklearn
        # gmm = GaussianMixture(n_components=2, means_init=means, covariance_type='full', random_state=0)
        # gmm.covariances_ = np.array(covariances)
        # gmm.weights_ = weights
         
        def proposal_2d(current_state, step_size=0.3):
            """Proposal distribution for 2D (normal distribution centered at current state)"""
            mean = current_state
            cov = step_size**2
            return multivariate_normal(mean, cov)

        def target_pdf_2d(x):
            p = weights[0] * multivariate_normal(means[0], covariances[0]).pdf(x) + weights[1] * multivariate_normal(means[1], covariances[1]).pdf(x)
            return p

        # Parameters
        init_state = [2, 2]

        # Run Metropolis-Hastings
        samples = mh(target_pdf_2d, proposal_2d, init_state, n_samples=10000, max_iter=20000, burn_in=2000)
         
        # Plot the samples and the target PDF contour
        ma = np.max(samples, axis=0)
        mi = np.min(samples, axis=0)
        x = np.linspace(mi[0]-0.1, ma[0]+0.1, 100)
        y = np.linspace(mi[1]-0.1, ma[1]+0.1, 100)
        X, Y = np.meshgrid(x, y)
        Z = target_pdf_2d(np.dstack((X, Y)))
         
        plt.figure(figsize=(10, 6))
        plt.scatter(samples[:, 0], samples[:, 1], s=4, alpha=0.6, label='Samples')
        plt.contour(X, Y, Z, levels=15, cmap='viridis', alpha=0.5)
        plt.colorbar(label='Probability Density')
        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Metropolis-Hastings Algorithm in 2D')
        plt.legend()
        plt.show()

